package com.sitemap.na2ne.alipay;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Random;

import com.alipay.sdk.app.PayTask;
import com.sitemap.na2ne.utils.CommonToast;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;

/**
 * 
 * Description: 支付宝支付助手(当手机上没有支付宝客户端也可以支付，只要有账号即可)
 * 
 * @author chenhao
 * @date 2016-1-7
 */
public class AliPayHelper {

	private Activity context;// 调用此类的Activity
	private Handler mHandler;// 调用此类的Activity中的Handler
	/** 支付宝支付部分 **/
	// 商户PID
	private static final String PARTNER = AliPayConfig.getPartner();
	// 商户收款账号
	private static final String SELLER = AliPayConfig.getSeller();
	// 商户私钥，pkcs8格式
	private static String RSA_PRIVATE = AliPayConfig.getRsaPrivate();
	// 订单交易成功，异步通知地址
	private static String NOTIFY_URL = AliPayConfig.getNotifyUrl();

	// 支付标识符
	public static final int SDK_PAY_FLAG = 1;
	// 检测支付宝客户端标识符
	public static final int SDK_CHECK_FLAG = 2;
	
	public final String GOODS_NAME="赛图定位服务";
	//用户id
	private String userID;

	public AliPayHelper() {

	}

	public AliPayHelper(Activity  context, Handler mHandler) {
		this.context = context;
		this.mHandler = mHandler;
	}

	/**
	 * call alipay sdk pay. 调用SDK支付
	 * 
	 * @param userID
	 *            用户ID
	 * @param goodsName
	 *            商品名称，默认值：赛图定位服务
	 * @param goodsInfo
	 *            商品描述，默认值：赛图定位服务
	 * @param price
	 *            商品价格，不能小于0
	 */
	public void pay(String userID,String goodsName, String goodsInfo, String price) {
		this.userID=userID;
//		price="0.01";//测试使用
		if (TextUtils.isEmpty(PARTNER) || TextUtils.isEmpty(RSA_PRIVATE)
				|| TextUtils.isEmpty(SELLER)) {
			new AlertDialog.Builder(context)
					.setTitle("警告")
					.setMessage("APP支付系统异常，请检查配置环境！")
					.setPositiveButton("确定",
							new DialogInterface.OnClickListener() {
								public void onClick(
										DialogInterface dialoginterface, int i) {
									dialoginterface.dismiss();
								}
							}).show();
			
			return;
		}
		if (TextUtils.isEmpty(goodsName)) {
			goodsName = GOODS_NAME;// 默认值
		}
		if (TextUtils.isEmpty(goodsInfo)) {
			goodsInfo = GOODS_NAME;// 默认值
		}
		if (!TextUtils.isEmpty(price)) {
			float money = 0;
			try {
				money = Float.parseFloat(price);
			} catch (NumberFormatException e) {
				e.printStackTrace();
				CommonToast.showLongToastMessage(context, "充值金额错误！");
				return;
			}
			if (money > 0) {

			} else {
				CommonToast.showLongToastMessage(context, "充值金额不能小于0！");
				return;
			}

		} else {
			CommonToast.showLongToastMessage(context, "充值金额不能为空！");
			return;
		}
		// 订单
		String orderInfo = getOrderInfo(goodsName, goodsInfo, price);

		// 对订单做RSA 签名
		String sign = sign(orderInfo);
		try {
			// 仅需对sign 做URL编码
			sign = URLEncoder.encode(sign, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			CommonToast.showShortToastMessage(context, "RSA签名错误！");
			return;
		}
		// 完整的符合支付宝参数规范的订单信息
		final String payInfo = orderInfo + "&sign=\"" + sign + "\"&"
				+ getSignType();

		Runnable payRunnable = new Runnable() {

			@Override												
			public void run() {
				// 构造PayTask 对象
				PayTask alipay = new PayTask(context);
				// 调用支付接口，获取支付结果
				String result = alipay.pay(payInfo);

				Message msg = new Message();
				msg.what = SDK_PAY_FLAG;
				msg.obj = result;
				mHandler.sendMessage(msg);
			}
		};

		// 必须异步调用
		Thread payThread = new Thread(payRunnable);
		payThread.start();
	}

	/**
	 * check whether the device has authentication alipay account.
	 * 查询终端设备是否存在支付宝认证账户
	 * 
	 */
	public void checkAccount() {
		Runnable checkRunnable = new Runnable() {

			@Override
			public void run() {
				// 构造PayTask 对象
				PayTask payTask = new PayTask(context);
				// 调用查询接口，获取查询结果
				boolean isExist = payTask.checkAccountIfExist();

				Message msg = new Message();
				msg.what = SDK_CHECK_FLAG;
				msg.obj = isExist;
				mHandler.sendMessage(msg);
			}
		};

		Thread checkThread = new Thread(checkRunnable);
		checkThread.start();

	}

	/**
	 * get the sdk version. 获取SDK版本号
	 * 
	 */
	public String getSDKVersion() {
		PayTask payTask = new PayTask(context);
		String version = payTask.getVersion();
		return version;
	}

	/**
	 * create the order info. 创建订单信息
	 * 
	 */
	public String getOrderInfo(String subject, String body, String price) {
		//测试

		// 签约合作者身份ID
		String orderInfo = "partner=" + "\"" + PARTNER + "\"";

		// 签约卖家支付宝账号
		orderInfo += "&seller_id=" + "\"" + SELLER + "\"";

		// 商户网站唯一订单号
		orderInfo += "&out_trade_no=" + "\"" + getOutTradeNo() + "\"";

		// 商品名称
		orderInfo += "&subject=" + "\"" + subject + "\"";

		// 商品详情(后面拼接了userID,以”$*$“和body分割开)
		orderInfo += "&body=" + "\"" + body +"$*$"+userID+ "\"";
		
		// 商品金额
		orderInfo += "&total_fee=" + "\"" + price + "\"";

		// 服务器异步通知页面路径
		orderInfo += "&notify_url=" + "\"" + NOTIFY_URL + "\"";

		// 服务接口名称， 固定值
		orderInfo += "&service=\"mobile.securitypay.pay\"";

		// 支付类型， 固定值
		orderInfo += "&payment_type=\"1\"";

		// 参数编码， 固定值
		orderInfo += "&_input_charset=\"utf-8\"";

		// 设置未付款交易的超时时间
		// 默认30分钟，一旦超时，该笔交易就会自动被关闭。
		// 取值范围：1m～15d。
		// m-分钟，h-小时，d-天，1c-当天（无论交易何时创建，都在0点关闭）。
		// 该参数数值不接受小数点，如1.5h，可转换为90m。
		orderInfo += "&it_b_pay=\"30m\"";

		// extern_token为经过快登授权获取到的alipay_open_id,带上此参数用户将使用授权的账户进行支付
		// orderInfo += "&extern_token=" + "\"" + extern_token + "\"";

		// 支付宝处理完请求后，当前页面跳转到商户指定页面的路径，可空
		// orderInfo += "&return_url=\"m.alipay.com\"";

		// 调用银行卡支付，需配置此参数，参与签名， 固定值 （需要签约《无线银行卡快捷支付》才能使用）
		// orderInfo += "&paymethod=\"expressGateway\"";
		

		return orderInfo;
	}

	/**
	 * get the out_trade_no for an order. 生成商户订单号，该值在商户端应保持唯一（可自定义格式规范）
	 * 
	 */
	public String getOutTradeNo() {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss",
				Locale.getDefault());
		Date date = new Date();
		String key = format.format(date);

		Random r = new Random();
		key = key + r.nextInt();
		key = "Ali_Android_" + key.substring(0, 15);
//		Wechat_Android_
		return key;
	}

	/**
	 * sign the order info. 对订单信息进行签名
	 * 
	 * @param content
	 *            待签名订单信息
	 */
	public String sign(String content) {
		return SignUtils.sign(content, RSA_PRIVATE);
	}

	/**
	 * get the sign type we use. 获取签名方式
	 * 
	 */
	public String getSignType() {
		return "sign_type=\"RSA\"";
	}

}
