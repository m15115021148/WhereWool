package com.sitemap.na2ne.activities;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.baoyz.swipemenulistview.SwipeMenu;
import com.baoyz.swipemenulistview.SwipeMenuCreator;
import com.baoyz.swipemenulistview.SwipeMenuItem;
import com.baoyz.swipemenulistview.SwipeMenuListView;
import com.baoyz.swipemenulistview.SwipeMenuListView.OnMenuItemClickListener;
import com.saitu.na2ne.R;
import com.sitemap.na2ne.adapters.FriendSetListviewAdapter;
import com.sitemap.na2ne.adapters.PackageListviewAdapter;
import com.sitemap.na2ne.application.MyApplication;
import com.sitemap.na2ne.config.WebUrlConfig;
import com.sitemap.na2ne.http.XUtilsHelper;
import com.sitemap.na2ne.models.CodeModel;
import com.sitemap.na2ne.models.MoneyModel;
import com.sitemap.na2ne.models.OldLocationModel;
import com.sitemap.na2ne.models.PackageModel;
import com.sitemap.na2ne.models.UserFriendModel;
import com.sitemap.na2ne.utils.CommonToast;
import com.sitemap.na2ne.views.MyProgressDialog;
import com.umeng.analytics.MobclickAgent;

/**
 * 联系人管理列表页面
 * 
 * @author zhang create at 2016年1月5日 下午2: 02:07
 */
public class FriendListActivity extends Activity implements OnClickListener {
	private static FriendListActivity context;// 本类
	private LinearLayout base_back_lay;// 返回键
	private TextView back;// 回退
	private SwipeMenuListView location_list;// 定位记录好友列表
	private FriendSetListviewAdapter adapter;// 定位记录好友列表适配器
	private static MyProgressDialog progressDialog;// 进度条
	private XUtilsHelper httpUtil = null;// 网络请求帮助类对象
	private TextView friend_add;// 添加好友按钮
	private final int zero = 0, one = 1, two = 2, three = 3, four = 4,
			five = 5, six = 6, SEVEN = 7, EIGHT = 8,NINE=9;// 0，1，2，3，4,5,6.7.8.9
	private String taocan = "";// 更改后的套餐
	public  List<PackageModel> buyPackage = new ArrayList<PackageModel>();// 购买套餐
	private int listPosition = 0;// 套餐下标
	private String buyPackageFriendId = "0";// 购买套餐的好友ID

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
//		// 隐藏android系统的状态栏
//		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
//				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		// 隐藏应用程序的标题栏，即当前activity的标题栏
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_friend_list);
		progressDialog = MyProgressDialog.createDialog(this);
		context = this;

		if (MyApplication.getNetObject().isNetConnected()) {
			if (progressDialog != null && !progressDialog.isShowing()) {
				progressDialog.setMessage("正在获取联系人列表...");
				progressDialog.show();
			}
			
			httpUtil = new XUtilsHelper(
					WebUrlConfig.getFriendList(MyApplication.userModel
							.getUserID()), handler);
			httpUtil.sendGet(two);
		} else {
			CommonToast.showShortToastMessage(this, "网络无法连接！");
		}
		initview();
	}

	@Override
	public void onResume() {
		if (adapter != null) {
			adapter = new FriendSetListviewAdapter(context);
			location_list.setAdapter(adapter);
		}
		super.onResume();
		// 友盟统计
		MobclickAgent.onResume(this);
	}

	@Override
	public void onPause() {
		super.onPause();
		// 友盟统计
		MobclickAgent.onPause(this);
	}

	private final Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			if (progressDialog != null && progressDialog.isShowing()) {
				progressDialog.dismiss();// 关闭进度条
			}
			if (msg.what == two) {
				// 获取联系人列表
				if (msg.arg1 == two) {
					if (MyApplication.luserFriend.size() > zero) {
						MyApplication.luserFriend.clear();
						MyApplication.luserFriend = JSONObject.parseArray(
								msg.obj.toString(), UserFriendModel.class);
						if (MyApplication.luserFriend.size() > zero) {
//							System.out.println("eeeeeeeeeeeeeeeeeeee");
							adapter = new FriendSetListviewAdapter(context);
//							System.out.println("fffffffffffffffffffff");
							location_list.setAdapter(adapter);
//							System.out.println("ggggggggggggggggggggggg");
						} else {
							CommonToast.showShortToastMessage(context,
									"暂无好友信息！");
						}
					} else {
						
						MyApplication.luserFriend = JSONObject.parseArray(
								msg.obj.toString(), UserFriendModel.class);
						if (MyApplication.luserFriend.size() > zero) {
//							System.out.println("hhhhhhhhhhhhhhhhhhhh");
							adapter = new FriendSetListviewAdapter(context);
//							System.out.println("iiiiiiiiiiiiiiiiiii");
							location_list.setAdapter(adapter);
						
//							System.out.println("jjjjjjjjjjjjjjjjjjjjj");
						} else {
							CommonToast.showShortToastMessage(context,
									"暂无好友信息！");
						}
					}
					httpUtil = new XUtilsHelper(WebUrlConfig.getPackageInfo("",
							"4"), handler);
					httpUtil.sendGet(SEVEN);
					if (progressDialog != null && progressDialog.isShowing()) {
						progressDialog.dismiss();// 关闭进度条
					}
				}
				// 更改好友套餐
				if (msg.arg1 == three) {
					int status = -1;
					CodeModel cm = JSON.parseObject(msg.obj.toString(),
							CodeModel.class);
					if (cm != null) {
						status = cm.getStatus();
						switch (status) {
						case zero:
							CommonToast.showShortToastMessage(context,
									"更换套餐成功，当前套餐结束后生效！");
							httpUtil = new XUtilsHelper(
									WebUrlConfig.requestMoney(MyApplication.userModel
											.getUserID()), handler);
							httpUtil.sendGet(six);
							if (MyApplication.getNetObject().isNetConnected()) {
								if (progressDialog != null && !progressDialog.isShowing()) {
									progressDialog.setMessage("正在刷新联系人列表...");
									progressDialog.show();
								}
								
								httpUtil = new XUtilsHelper(
										WebUrlConfig.getFriendList(MyApplication.userModel
												.getUserID()), handler);
								httpUtil.sendGet(two);
							} else {
								CommonToast.showShortToastMessage(context,
										"网络无法连接！");
							}
							break;
						case one:
							CommonToast.showShortToastMessage(context,
									"提交申请失败，失败原因：" + cm.getErrorMessage());
							break;
						case two:
							CommonToast
									.showShortToastMessage(context, "服务器异常！");
							break;
						default:
							break;
						}
					}
				}
				// 退订好友套餐
				if (msg.arg1 == four) {
					int status = -1;
					CodeModel cm = JSON.parseObject(msg.obj.toString(),
							CodeModel.class);
					if (cm != null) {
						status = cm.getStatus();
						switch (status) {
						case zero:
							CommonToast.showShortToastMessage(context,
									"退订好友套餐成功，当前套餐到期后将不可用，如再用需要重新开通");
							if (MyApplication.getNetObject().isNetConnected()) {
								if (progressDialog != null && !progressDialog.isShowing()) {
									progressDialog.setMessage("正在刷新联系人列表...");
									progressDialog.show();
								}
								httpUtil = new XUtilsHelper(
										WebUrlConfig.getFriendList(MyApplication.userModel
												.getUserID()), handler);
								httpUtil.sendGet(two);
							} else {
								CommonToast.showShortToastMessage(context,
										"网络无法连接！");
							}
							break;
						case one:
							CommonToast.showShortToastMessage(context,
									"提交申请失败，失败原因：" + cm.getErrorMessage());
							break;
						case two:
							CommonToast
									.showShortToastMessage(context, "服务器异常！");
							break;
						default:
							break;
						}
					}
				}

				// 重新开通/订购
				if (msg.arg1 == five) {
					int status = -1;
					CodeModel cm = JSON.parseObject(msg.obj.toString(),
							CodeModel.class);
					if (cm != null) {
						status = cm.getStatus();
						switch (status) {
						case zero:
							CommonToast
									.showShortToastMessage(context, "提交申请成功");
							httpUtil = new XUtilsHelper(
									WebUrlConfig.requestMoney(MyApplication.userModel
											.getUserID()), handler);
							httpUtil.sendGet(six);
							if (MyApplication.getNetObject().isNetConnected()) {
								if (progressDialog != null && !progressDialog.isShowing()) {
									progressDialog.setMessage("正在刷新联系人列表...");
									progressDialog.show();
								}
								httpUtil = new XUtilsHelper(
										WebUrlConfig.getFriendList(MyApplication.userModel
												.getUserID()), handler);
								httpUtil.sendGet(two);
							} else {
								CommonToast.showShortToastMessage(context,
										"网络无法连接！");
							}
							break;
						case one:
							CommonToast.showShortToastMessage(context,
									"提交申请失败，失败原因：" + cm.getErrorMessage());
							break;
						case two:
							CommonToast
									.showShortToastMessage(context, "服务器异常！");
							break;
						default:
							break;
						}
					}
				}

				// 获得余额
				if (msg.arg1 == six) {
					// System.out.println(msg.obj.toString());
					MyApplication.moneyModel = JSON.parseObject(
							msg.obj.toString(), MoneyModel.class);
					if (MyApplication.moneyModel != null) {
					} else {
						CommonToast.showShortToastMessage(context,
								"服务器异常,获取余额失败！");
					}

				}

				// 获得套餐列表
				if (msg.arg1 == SEVEN) {
					// System.out.println(msg.obj.toString());
					MyApplication.lPackage.clear();
					MyApplication.lPackage = JSONObject.parseArray(
							msg.obj.toString(), PackageModel.class);

				}
				// 订购优惠套餐
				if (msg.arg1 == EIGHT) {
					// System.out.println(msg.obj.toString());
					int status = -1;
					CodeModel cm = JSON.parseObject(msg.obj.toString(),
							CodeModel.class);
					if (cm != null) {
						status = cm.getStatus();
						switch (status) {
						case zero:
							CommonToast.showShortToastMessage(context,
									"订购优惠套餐成功!");
							httpUtil = new XUtilsHelper(
									WebUrlConfig.requestMoney(MyApplication.userModel
											.getUserID()), handler);
							httpUtil.sendGet(six);
							if (MyApplication.getNetObject().isNetConnected()) {
								if (progressDialog != null && !progressDialog.isShowing()) {
									progressDialog.setMessage("正在刷新联系人列表...");
									progressDialog.show();
								}
								httpUtil = new XUtilsHelper(
										WebUrlConfig.getFriendList(MyApplication.userModel
												.getUserID()), handler);
								httpUtil.sendGet(two);
							} else {
								CommonToast.showShortToastMessage(context,
										"网络无法连接！");
							}
							break;
						case one:
							CommonToast.showShortToastMessage(context,
									"订购套餐失败，失败原因：" + cm.getErrorMessage());
							break;
						default:
							break;
						}
					}
				}// 重新发送短信
				if (msg.arg1 == NINE) {
					// System.out.println(msg.obj.toString());
					int status = -1;
					CodeModel cm = JSON.parseObject(msg.obj.toString(),
							CodeModel.class);
					if (cm != null) {
						status = cm.getStatus();
						switch (status) {
						case zero:
							CommonToast.showShortToastMessage(context,
									"发送成功，请等待对方回复短信后再进行使用!");
							break;
						case one:
							CommonToast.showShortToastMessage(context,
									"订购套餐失败，失败原因：" + cm.getErrorMessage());
							break;
						default:
							break;
						}
					}
				}
			} else if (msg.what == one) {
				CommonToast.showShortToastMessage(context, "突然找不到数据了，再给次机会吧>_<");
				if (msg.arg1==NINE) {
					CommonToast.showShortToastMessage(context, "已经申请发送短信，如果没收到短信请再次点击重新发送！");
				}else {
					CommonToast.showShortToastMessage(context, "服务器繁忙，请稍后重试");
				}
				// 获取数据异常
			} else if (msg.what == one) {
				// 返回数据为null
				if (msg.arg1 == one) {
					CommonToast.showShortToastMessage(context, "服务器异常！");
				}
				if (msg.arg1 == two) {
					CommonToast.showShortToastMessage(context, "服务器异常！");
				}
			}

		}

	};

	// step 1. create a MenuCreator
	SwipeMenuCreator creator = new SwipeMenuCreator() {

		@Override
		public List<List<SwipeMenuItem>> addSwipeMenuList() {
			List<List<SwipeMenuItem>> list = new ArrayList<List<SwipeMenuItem>>();
			// create "open" item
			for (int i = 0; i < MyApplication.luserFriend.size(); i++) {
				if (MyApplication.isCTCCNO(MyApplication.luserFriend.get(i)
						.getFriendPhone())) {
					if (MyApplication.luserFriend.get(i).getIsAgree()
							.equals("0")) {
						List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();

						// create "delete" item
						SwipeMenuItem deleteItem = new SwipeMenuItem(
								getApplicationContext());
						// set item background
						deleteItem.setBackground(new ColorDrawable(Color
								.parseColor("#e75b5f")));
						// set item width
						deleteItem.setWidth(dp2px(90));
						deleteItem.setTypeId("1");
						deleteItem.setTitle("重新发送短信");
						deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
						deleteItem.setTitleSize(14);
						deleteItem.setFriendId(MyApplication.luserFriend.get(i)
								.getFriendPhone());//这里存的参数用的电话号码
						deleteItem.setTitleColor(Color.WHITE);
						// add to menu
						itemList.add(deleteItem);
						list.add(itemList);
						continue;
					} else if (MyApplication.luserFriend.get(i).getOpen()
							.equals("1")
							&& MyApplication.luserFriend.get(i)
									.getUnsubscribe().equals("0")) {
						//如果是免费用户
						if (MyApplication.luserFriend.get(i).getPackageType().equals("4")) {
							List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();
							// create "open" item
							SwipeMenuItem openItem = new SwipeMenuItem(
									getApplicationContext());
							// set item background
							openItem.setBackground(new ColorDrawable(Color
									.parseColor("#f7b910")));
							// set item width
							openItem.setWidth(dp2px(90));
							// set item title
							openItem.setTitle("更换套餐");
							openItem.setTypeId("1");
								openItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
							// set item title fontsize
							openItem.setTitleSize(18);
							// set item title font color
							openItem.setTitleColor(Color.WHITE);
							openItem.setFriendId(MyApplication.luserFriend.get(i)
									.getFriendID());
							openItem.setOldPackage(MyApplication.luserFriend.get(i)
									.getPackageID());
							// add to menu
							itemList.add(openItem);
							list.add(itemList);
							continue;
						}else {
							List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();
							// create "open" item
							SwipeMenuItem openItem = new SwipeMenuItem(
									getApplicationContext());
							// set item background
							openItem.setBackground(new ColorDrawable(Color
									.parseColor("#f7b910")));
							// set item width
							openItem.setWidth(dp2px(90));
							// set item title
							openItem.setTitle("更换套餐");
							openItem.setTypeId("1");
								openItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
							// set item title fontsize
							openItem.setTitleSize(18);
							// set item title font color
							openItem.setTitleColor(Color.WHITE);
							openItem.setFriendId(MyApplication.luserFriend.get(i)
									.getFriendID());
							openItem.setOldPackage(MyApplication.luserFriend.get(i)
									.getPackageID());
							// add to menu
							itemList.add(openItem);

							// create "delete" item
							SwipeMenuItem deleteItem = new SwipeMenuItem(
									getApplicationContext());
							// set item background
							deleteItem.setBackground(new ColorDrawable(Color
									.parseColor("#e75b5f")));
							// set item width
							deleteItem.setWidth(dp2px(90));
							deleteItem.setTitle("退订");
							deleteItem.setTitleSize(18);
							deleteItem.setTypeId("1");
							deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
							deleteItem.setTitleColor(Color.WHITE);
							deleteItem.setFriendId(MyApplication.luserFriend.get(i)
									.getFriendID());
							deleteItem.setOldPackage(MyApplication.luserFriend.get(
									i).getPackageID());
							// add to menu
							itemList.add(deleteItem);
							list.add(itemList);
							continue;
						}
						
					}

					if (MyApplication.luserFriend.get(i).getUnsubscribe()
							.equals("1")
							|| MyApplication.luserFriend.get(i).getOpen()
									.equals("1")) {
						List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();

						// create "delete" item
						SwipeMenuItem deleteItem = new SwipeMenuItem(
								getApplicationContext());
						// set item background
						deleteItem.setBackground(new ColorDrawable(Color
								.parseColor("#e75b5f")));
						// set item width
						deleteItem.setWidth(dp2px(90));
						deleteItem.setTitle("重新订购");
						deleteItem.setTitleSize(18);
						deleteItem.setTypeId("1");
						deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
						deleteItem.setFriendId(MyApplication.luserFriend.get(i)
								.getFriendID());
						deleteItem.setOldPackage(MyApplication.luserFriend.get(
								i).getPackageID());
						deleteItem.setTitleColor(Color.WHITE);
						// add to menu
						itemList.add(deleteItem);
						list.add(itemList);
						continue;
					}

					if (MyApplication.luserFriend.get(i).getOpen().equals("0")) {
						List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();

						// create "delete" item
						SwipeMenuItem deleteItem = new SwipeMenuItem(
								getApplicationContext());
						// set item background
						deleteItem.setBackground(new ColorDrawable(Color
								.parseColor("#e75b5f")));
						// set item width
						deleteItem.setWidth(dp2px(90));
						deleteItem.setTitle("重新开通");
						deleteItem.setTitleSize(18);
						deleteItem.setTypeId("1");
						deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
						deleteItem.setFriendId(MyApplication.luserFriend.get(i)
								.getFriendID());
						deleteItem.setOldPackage(MyApplication.luserFriend.get(
								i).getPackageID());
						deleteItem.setTitleColor(Color.WHITE);
						// add to menu
						itemList.add(deleteItem);
						list.add(itemList);
						continue;
					}

				} else if (MyApplication.isCMCCNO(MyApplication.luserFriend
						.get(i).getFriendPhone())) {
					if (MyApplication.luserFriend.get(i).getIsAgree()
							.equals("0")) {
						List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();

						// create "delete" item
						SwipeMenuItem deleteItem = new SwipeMenuItem(
								getApplicationContext());
						// set item background
						deleteItem.setBackground(new ColorDrawable(Color
								.parseColor("#e75b5f")));
						// set item width
						deleteItem.setWidth(dp2px(90));
						deleteItem.setTitle("重新发送短信");
						deleteItem.setTypeId("2");
						deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
						deleteItem.setTitleSize(14);
						deleteItem.setFriendId(MyApplication.luserFriend.get(i)
								.getFriendPhone());//这里存的参数用的电话号码
						deleteItem.setTitleColor(Color.WHITE);
						// add to menu
						itemList.add(deleteItem);
						list.add(itemList);
						continue;
					} else 
//						if (MyApplication.luserFriend.get(i).getOpen()
//							.equals("1")) 
						{
						List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();

						// create "delete" item
						SwipeMenuItem deleteItem = new SwipeMenuItem(
								getApplicationContext());
						// set item background
						deleteItem.setBackground(new ColorDrawable(Color
								.parseColor("#f7b910")));
						// set item width
						deleteItem.setWidth(dp2px(90));
						deleteItem.setTitle("购买优惠套餐");
						deleteItem.setTitleSize(14);
						deleteItem.setTypeId("2");
						deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
						deleteItem.setFriendId(MyApplication.luserFriend.get(i)
								.getFriendID());
						deleteItem.setOldPackage(MyApplication.luserFriend.get(
								i).getPackageID());
						deleteItem.setTitleColor(Color.WHITE);
						// add to menu
						itemList.add(deleteItem);
						list.add(itemList);
						continue;
					}
				} else if (MyApplication.isCUCCNO(MyApplication.luserFriend
						.get(i).getFriendPhone())) {
					if (MyApplication.luserFriend.get(i).getIsAgree()
							.equals("0")) {
						List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();

						// create "delete" item
						SwipeMenuItem deleteItem = new SwipeMenuItem(
								getApplicationContext());
						// set item background
						deleteItem.setBackground(new ColorDrawable(Color
								.parseColor("#e75b5f")));
						// set item width
						deleteItem.setWidth(dp2px(90));
						deleteItem.setTitle("重新发送短信");
						deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
						deleteItem.setTitleSize(14);
						deleteItem.setTypeId("3");
						deleteItem.setFriendId(MyApplication.luserFriend.get(i)
								.getFriendPhone());//这里存的参数用的电话号码
						deleteItem.setTitleColor(Color.WHITE);
						// add to menu
						itemList.add(deleteItem);
						list.add(itemList);
						continue;
					} else 
//						if (MyApplication.luserFriend.get(i).getOpen()
//							.equals("1"))
					{
						List<SwipeMenuItem> itemList = new ArrayList<SwipeMenuItem>();

						// create "delete" item
						SwipeMenuItem deleteItem = new SwipeMenuItem(
								getApplicationContext());
						// set item background
						deleteItem.setBackground(new ColorDrawable(Color
								.parseColor("#f7b910")));
						// set item width
						deleteItem.setWidth(dp2px(90));
						deleteItem.setTitle("购买优惠套餐");
						deleteItem.setTitleSize(14);
						deleteItem.setTypeId("3");
						deleteItem.setFriendType(MyApplication.luserFriend.get(i).getFriendType());
						deleteItem.setOldPackage(MyApplication.luserFriend.get(
								i).getPackageID());
						deleteItem.setFriendId(MyApplication.luserFriend.get(i)
								.getFriendID());
						deleteItem.setTitleColor(Color.WHITE);
						// add to menu
						itemList.add(deleteItem);
						list.add(itemList);
						continue;
					}
				}
			}
			return list;
		}

	};

	/**
	 * 初始化控件
	 */
	private void initview() {
		back = (TextView) findViewById(R.id.back_tv);
		back.setOnClickListener(this);
		base_back_lay = (LinearLayout) findViewById(R.id.base_back_lay);
		base_back_lay.setOnClickListener(this);
		location_list = (SwipeMenuListView) findViewById(R.id.friend_list);
//		System.out.println("aaaaaaaaaaaaaaaaaaaaa");
		adapter = new FriendSetListviewAdapter(context);
		
//		System.out.println("bbbbbbbbbbbbbbbbb");
		// set creator
		location_list.setMenuCreator(creator);
//		System.out.println("ccccccccccccccccccc");
		location_list.setAdapter(adapter);
//		System.out.println("dddddddddddddddddddddd");
		friend_add = (TextView) findViewById(R.id.friend_add);
		friend_add.setOnClickListener(this);
		location_list.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				Intent intent=new Intent(FriendListActivity.this,FriendInfoActivity.class);
				intent.putExtra("position", position);
				startActivity(intent);
			}
		});
 
		// step 2. listener item click event
		location_list.setOnMenuItemClickListener(new OnMenuItemClickListener() {
			@Override
			public void onMenuItemClick(final int position,
					final SwipeMenu menu, final int index) {
				if (buyPackage.size() <= 0) {
					httpUtil = new XUtilsHelper(WebUrlConfig.getPackageInfo("",
							"4"), handler);
					httpUtil.sendGet(SEVEN);
					
				}
				switch (Integer.parseInt(menu.getMenuItem(index).getTypeId())) {
				case 1:
					if (MyApplication.lPackage.size() > 0) {
						buyPackage.clear();
						for (int i = 0; i < MyApplication.lPackage.size(); i++) {
							if (MyApplication.lPackage.get(i).getIsTry().equals("1")) {
								continue;
							}
							if (MyApplication.lPackage.get(i).getPackageType()
									.equals("1")) {
								buyPackage.add(MyApplication.lPackage.get(i));
							}
							if (!menu.getMenuItem(index).getFriendType().equals("0")) {
								if (MyApplication.lPackage.get(i).getPackageType().equals("4")) {
									buyPackage.add(MyApplication.lPackage.get(i));
								}
							}
						}
						
					}
					break;
				case 2:
					if (MyApplication.lPackage.size() > 0) {
						buyPackage.clear();
						for (int i = 0; i < MyApplication.lPackage.size(); i++) {
							if (MyApplication.lPackage.get(i).getIsTry().equals("1")) {
								continue;
							}
							if (MyApplication.lPackage.get(i).getPackageType()
									.equals("2")) {
								buyPackage.add(MyApplication.lPackage.get(i));
							}
							if (!menu.getMenuItem(index).getFriendType().equals("0")) {
								if (MyApplication.lPackage.get(i).getPackageType().equals("4")) {
									buyPackage.add(MyApplication.lPackage.get(i));
								}
							}
						}
					}
					break;
				case 3:
					if (MyApplication.lPackage.size() > 0) {
						buyPackage.clear();
						for (int i = 0; i < MyApplication.lPackage.size(); i++) {
							if (MyApplication.lPackage.get(i).getIsTry().equals("1")) {
								continue;
							}
							if (MyApplication.lPackage.get(i).getPackageType()
									.equals("3")) {
								buyPackage.add(MyApplication.lPackage.get(i));
							}
							if (!menu.getMenuItem(index).getFriendType().equals("0")) {
								if (MyApplication.lPackage.get(i).getPackageType().equals("4")) {
									buyPackage.add(MyApplication.lPackage.get(i));
								}
							}
						}
					}
					break;
				default:
					break;
				}
				if (menu.getMenuItem(index).getOldPackage()!=null&&!menu.getMenuItem(index).getOldPackage().equals("")) {
					for (int i = 0; i < buyPackage.size(); i++) {
						if (buyPackage.get(i).getPackageID().equals(menu.getMenuItem(index).getOldPackage())) {
							listPosition=i;
							break;
						}
					}
				}
				
				if ( menu.getMenuItem(index).getTitle().endsWith("重新开通")) {
					// 重新开通
					final Dialog dialog = new Dialog(FriendListActivity.this,
							R.style.ChangeDialog);
					dialog.setContentView(R.layout.alertdialog_discount);
					ListView packageList = (ListView) dialog
							.findViewById(R.id.package_list);

					final PackageListviewAdapter packageAdapter = new PackageListviewAdapter(
							context, buyPackage, Integer.parseInt(menu
									.getMenuItem(index).getOldPackage()));
					
					packageList.setAdapter(packageAdapter);
					
					packageList
							.setOnItemClickListener(new OnItemClickListener() {

								@Override
								public void onItemClick(AdapterView<?> parent,
										View view, int position, long id) {
									listPosition = position;
									packageAdapter.setCheckPackage(Integer
											.parseInt(buyPackage.get(
													listPosition)
													.getPackageID()));
									packageAdapter.notifyDataSetChanged();
								}
							});
					final TextView close = (TextView) dialog
							.findViewById(R.id.change_close);
					TextView discountSub = (TextView) dialog
							.findViewById(R.id.discount_sub);

					close.setOnClickListener(new OnClickListener() {
						@Override
						public void onClick(View v) {
							dialog.dismiss();
						}
					});
					discountSub.setText("确    定");
					discountSub.setOnClickListener(new OnClickListener() {

						@Override
						public void onClick(View v) {
							AlertDialog.Builder normalDia = new AlertDialog.Builder(
									FriendListActivity.this);
							normalDia.setTitle("提示");
							if (buyPackage.get(listPosition).getPackageType().equals("4")) {
								normalDia.setMessage("是否重新开通好友套餐？(注：免费套餐不一定是实时数据，并不能保证一定能定位成功，请确保目标好友安装过哪儿呢APP，且开启APP才能使用免费套餐，收费套餐则不用安装APP，且定位准确，基本都能定位成功！)");
							}else {
								normalDia.setMessage("是否重新开通好友套餐？");
							}
							

							normalDia.setPositiveButton("确定",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											if (MyApplication.moneyModel != null) {
												if (Double
														.parseDouble(MyApplication.moneyModel
																.getBalance()) >= Double
														.parseDouble(buyPackage
																.get(listPosition)
																.getPackagePrice())) {
													if (MyApplication
															.getNetObject()
															.isNetConnected()) {
														if (progressDialog != null && !progressDialog.isShowing()) {
															progressDialog
															.setMessage("正在重新申请...");
													progressDialog.show();
														}
														
														httpUtil = new XUtilsHelper(
																WebUrlConfig.orderAgainFriend(MyApplication.userModel
																						.getUserID(), MyApplication.luserFriend
																						.get(position)
																						.getFriendPhone(), MyApplication.luserFriend
																						.get(position)
																						.getFriendID(), buyPackage
																						.get(listPosition)
																						.getPackageID(), MyApplication.luserFriend
																		.get(position)
																		.getOpen(), MyApplication.luserFriend
																		.get(position)
																		.getUnsubscribe())
																		,
																handler);
														httpUtil.sendGet(five);
														close.performClick();
													} else {
														CommonToast
																.showShortToastMessage(
																		context,
																		"网络无法连接！");
													}
												} else {
													CommonToast
															.showShortToastMessage(
																	context,
																	"余额不足，请充值！");
													Intent intent = new Intent(
															FriendListActivity.this,
															RechargeActivity.class);
													CommonToast
													.showShortToastMessage(
															context,
															"余额不足:"+buyPackage
															.get(listPosition)
															.getPackagePrice());
													intent.putExtra(
															"packageMoney",
															buyPackage
																	.get(listPosition)
																	.getPackagePrice());
													context.startActivity(intent);
												}
											}

										}
									});
							normalDia.setNegativeButton("取消",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.dismiss();
										}
									});
							normalDia.create().show();

						}
					});
					dialog.show();
				}else if ( menu.getMenuItem(index).getTitle().endsWith("重新订购")) {
					// 重新订购
					final Dialog dialog = new Dialog(FriendListActivity.this,
							R.style.ChangeDialog);
					dialog.setContentView(R.layout.alertdialog_discount);
					ListView packageList = (ListView) dialog
							.findViewById(R.id.package_list);

					final PackageListviewAdapter packageAdapter = new PackageListviewAdapter(
							context, buyPackage, Integer.parseInt(menu
									.getMenuItem(index).getOldPackage()));
					packageList.setAdapter(packageAdapter);
					packageList
							.setOnItemClickListener(new OnItemClickListener() {

								@Override
								public void onItemClick(AdapterView<?> parent,
										View view, int position, long id) {
									listPosition = position;
									packageAdapter.setCheckPackage(Integer
											.parseInt(buyPackage.get(
													listPosition)
													.getPackageID()));
									packageAdapter.notifyDataSetChanged();
								}
							});
					final TextView close = (TextView) dialog
							.findViewById(R.id.change_close);
					TextView discountSub = (TextView) dialog
							.findViewById(R.id.discount_sub);

					close.setOnClickListener(new OnClickListener() {
						@Override
						public void onClick(View v) {
							dialog.dismiss();
						}
					});
					discountSub.setText("确    定");
					discountSub.setOnClickListener(new OnClickListener() {

						@Override
						public void onClick(View v) {
							AlertDialog.Builder normalDia = new AlertDialog.Builder(
									FriendListActivity.this);
							normalDia.setTitle("提示");
							if (buyPackage.get(listPosition).getPackageType().equals("4")) {
								normalDia.setMessage("是否重新订购好友套餐？(注：免费套餐不一定是实时数据，并不能保证一定能定位成功，请确保目标好友安装过哪儿呢APP，且开启APP才能使用免费套餐，收费套餐则不用安装APP，且定位准确，基本都能定位成功！)");
							}else {
								normalDia.setMessage("是否重新订购好友套餐？");
							}

							normalDia.setPositiveButton("确定",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
//											if (MyApplication.moneyModel != null) {
//												if (Double
//														.parseDouble(MyApplication.moneyModel
//																.getBalance()) >= Double
//														.parseDouble(buyPackage
//																.get(listPosition)
//																.getPackagePrice())) {
													if (MyApplication
															.getNetObject()
															.isNetConnected()) {
														if (progressDialog != null && !progressDialog.isShowing()) {
															progressDialog
															.setMessage("正在重新申请...");
													progressDialog.show();
														}
														httpUtil = new XUtilsHelper(
																WebUrlConfig.orderAgainFriend(MyApplication.userModel
																						.getUserID(), MyApplication.luserFriend
																						.get(position)
																						.getFriendPhone(), MyApplication.luserFriend
																						.get(position)
																						.getFriendID(), buyPackage
																						.get(listPosition)
																						.getPackageID(), MyApplication.luserFriend
																		.get(position)
																		.getOpen(), MyApplication.luserFriend
																		.get(position)
																		.getUnsubscribe())
																		,
																handler);
														httpUtil.sendGet(five);
														close.performClick();
													} else {
														CommonToast
																.showShortToastMessage(
																		context,
																		"网络无法连接！");
													}
//												} else {
//													CommonToast
//															.showShortToastMessage(
//																	context,
//																	"余额不足，请充值！");
//													Intent intent = new Intent(
//															FriendListActivity.this,
//															RechargeActivity.class);
//													intent.putExtra(
//															"packageMoney",
//															buyPackage
//																	.get(listPosition)
//																	.getPackagePrice());
//													context.startActivity(intent);
//												}
//											}

										}
									});
							normalDia.setNegativeButton("取消",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.dismiss();
										}
									});
							normalDia.create().show();

						}
					});
					dialog.show();
				} 
				else if (menu.getMenuItem(index).getTitle().endsWith("更换套餐")) {
					// 更改套餐
					final Dialog dialog = new Dialog(FriendListActivity.this,
							R.style.ChangeDialog);
					dialog.setContentView(R.layout.alertdialog_discount);
					ListView packageList = (ListView) dialog
							.findViewById(R.id.package_list);

					final PackageListviewAdapter packageAdapter = new PackageListviewAdapter(
							context, buyPackage, Integer.parseInt(menu
									.getMenuItem(index).getOldPackage()));
					packageList.setAdapter(packageAdapter);
					packageList
							.setOnItemClickListener(new OnItemClickListener() {

								@Override
								public void onItemClick(AdapterView<?> parent,
										View view, int position, long id) {
									listPosition = position;
									packageAdapter.setCheckPackage(Integer
											.parseInt(buyPackage.get(
													listPosition)
													.getPackageID()));
									packageAdapter.notifyDataSetChanged();
								}
							});
					final TextView close = (TextView) dialog
							.findViewById(R.id.change_close);
					TextView discountSub = (TextView) dialog
							.findViewById(R.id.discount_sub);

					close.setOnClickListener(new OnClickListener() {
						@Override
						public void onClick(View v) {
							dialog.dismiss();
						}
					});
					discountSub.setText("确    定");
					discountSub.setOnClickListener(new OnClickListener() {

						@Override
						public void onClick(View v) {
							AlertDialog.Builder normalDia = new AlertDialog.Builder(
									FriendListActivity.this);
							normalDia.setTitle("提示");
							if (buyPackage.get(listPosition).getPackageType().equals("4")) {
								normalDia.setMessage("是否更改好友套餐？(注：免费套餐不一定是实时数据，并不能保证一定能定位成功，请确保目标好友安装过哪儿呢APP，且开启APP才能使用免费套餐，收费套餐则不用安装APP，且定位准确，基本都能定位成功！)");
							}else {
								normalDia.setMessage("是否更改好友套餐？");
							}

							normalDia.setPositiveButton("确定",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
//											if (MyApplication.moneyModel != null) {
//												if (Double
//														.parseDouble(MyApplication.moneyModel
//																.getBalance()) >= Double
//														.parseDouble(buyPackage
//																.get(listPosition)
//																.getPackagePrice())) {
													if (MyApplication
															.getNetObject()
															.isNetConnected()) {
														if (progressDialog != null && !progressDialog.isShowing()) {
															progressDialog.setMessage("正在更改联系人套餐...");
															progressDialog.show();
														}
														
														httpUtil = new XUtilsHelper(
																WebUrlConfig.updateFriendType(
																		MyApplication.userModel.getUserID(),
																		buyPackage
																		.get(listPosition)
																		.getPackageID(),
																		MyApplication.luserFriend.get(position)
																				.getFriendID(),menu.getMenuItem(index).getOldPackage()), handler);
														httpUtil.sendGet(three);
														close.performClick();
													} else {
														CommonToast
																.showShortToastMessage(
																		context,
																		"网络无法连接！");
													}
//												} else {
//													CommonToast
//															.showShortToastMessage(
//																	context,
//																	"余额不足，请充值！");
//													Intent intent = new Intent(
//															FriendListActivity.this,
//															RechargeActivity.class);
//													intent.putExtra(
//															"packageMoney",
//															buyPackage
//																	.get(listPosition)
//																	.getPackagePrice());
//													context.startActivity(intent);
//												}
//											}

										}
									});
							normalDia.setNegativeButton("取消",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.dismiss();
										}
									});
							normalDia.create().show();

						}
					});
					dialog.show();
				} else if (menu.getMenuItem(index).getTitle().endsWith("退订")) {
					AlertDialog.Builder normalDia = new AlertDialog.Builder(
							FriendListActivity.this);
					normalDia.setTitle("提示");
					normalDia
							.setMessage("是否要退订好友套餐？（退订后，当前套餐到期后将不可用，如再用需要重新开通）");

					normalDia.setPositiveButton("确定",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									if (MyApplication.luserFriend.get(position)
											.getOpen().equals("0")) {
										CommonToast.showShortToastMessage(
												context, "该好友未开通服务，不能退订套餐！");
										return;
									}
									if (MyApplication.luserFriend.get(position)
											.getUnsubscribe().equals("1")) {
										CommonToast.showShortToastMessage(
												context, "该好友已退订服务，不能再次退订！");
										return;
									}
									if (MyApplication.getNetObject()
											.isNetConnected()) {
										if (progressDialog != null && !progressDialog.isShowing()) {
											progressDialog
											.setMessage("正在退订联系人套餐...");
									progressDialog.show();
										}
										
										httpUtil = new XUtilsHelper(
												WebUrlConfig
														.cancelFriend(
																MyApplication.userModel
																		.getUserID(),
																MyApplication.luserFriend
																		.get(position)
																		.getFriendID()),
												handler);
										httpUtil.sendGet(four);
									} else {
										CommonToast.showShortToastMessage(
												context, "网络无法连接！");
									}
								}
							});
					normalDia.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.dismiss();
								}
							});
					normalDia.create().show();
				} else if (menu.getMenuItem(index).getTitle().equals("购买优惠套餐")) {
					final Dialog dialog = new Dialog(FriendListActivity.this,
							R.style.ChangeDialog);
					dialog.setContentView(R.layout.alertdialog_discount);
					ListView packageList = (ListView) dialog
							.findViewById(R.id.package_list);

					final PackageListviewAdapter packageAdapter = new PackageListviewAdapter(
							context, buyPackage, Integer.parseInt(menu
									.getMenuItem(index).getOldPackage()));
					packageList.setAdapter(packageAdapter);
					packageList
							.setOnItemClickListener(new OnItemClickListener() {

								@Override
								public void onItemClick(AdapterView<?> parent,
										View view, int position, long id) {
									listPosition = position;
									packageAdapter.setCheckPackage(Integer
											.parseInt(buyPackage.get(
													listPosition)
													.getPackageID()));
									packageAdapter.notifyDataSetChanged();
								}
							});
					final TextView close = (TextView) dialog
							.findViewById(R.id.change_close);
					TextView discountSub = (TextView) dialog
							.findViewById(R.id.discount_sub);

					discountSub.setOnClickListener(new OnClickListener() {
						@Override
						public void onClick(View v) {

							AlertDialog.Builder normalDia = new AlertDialog.Builder(
									FriendListActivity.this);
							normalDia.setTitle("提示");
							if (buyPackage.get(listPosition).getPackageType().equals("4")) {
								normalDia.setMessage("是否购买好友套餐？(注：免费套餐不一定是实时数据，并不能保证一定能定位成功，请确保目标好友安装过哪儿呢APP，且开启APP才能使用免费套餐，收费套餐则不用安装APP，且定位准确，基本都能定位成功！)");
							}else {
								normalDia.setMessage("是否购买好友套餐？");
							};

							normalDia.setPositiveButton("确定",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											if (MyApplication.moneyModel != null) {
												if (Double
														.parseDouble(MyApplication.moneyModel
																.getBalance()) >= Double
														.parseDouble(buyPackage
																.get(listPosition)
																.getPackagePrice())) {
													if (MyApplication
															.getNetObject()
															.isNetConnected()) {
														buyPackageFriendId = menu
																.getMenuItem(
																		index)
																.getFriendId();
														if (progressDialog != null && !progressDialog.isShowing()) {
															progressDialog
															.setMessage("正在订购套餐...");
													progressDialog.show();
														}
														
														httpUtil = new XUtilsHelper(
																WebUrlConfig
																		.addLocatonTimes(
																				MyApplication.userModel
																						.getUserID(),
																				menu.getMenuItem(
																						index)
																						.getFriendId(),
																				buyPackage
																						.get(listPosition)
																						.getPackageID()),
																handler);
														httpUtil.sendGet(EIGHT);
														close.performClick();
													} else {
														CommonToast
																.showShortToastMessage(
																		context,
																		"网络无法连接！");
													}
												} else {
													CommonToast
															.showShortToastMessage(
																	context,
																	"余额不足，请充值！");
													Intent intent = new Intent(
															FriendListActivity.this,
															RechargeActivity.class);
													intent.putExtra(
															"packageMoney",
															buyPackage
																	.get(listPosition)
																	.getPackagePrice());
													context.startActivity(intent);
												}
											}

										}
									});
							normalDia.setNegativeButton("取消",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.dismiss();
										}
									});
							normalDia.create().show();

						}
					});

					close.setOnClickListener(new OnClickListener() {
						@Override
						public void onClick(View v) {
							dialog.dismiss();
						}
					});
					dialog.show();
				}else if (menu.getMenuItem(index).getTitle().equals("重新发送短信")) {
					AlertDialog.Builder normalDia = new AlertDialog.Builder(
							FriendListActivity.this);
					normalDia.setTitle("提示");
						normalDia.setMessage("是否重新发送短信？");

					normalDia.setPositiveButton("确定",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(
										DialogInterface dialog,
										int which) {
											if (MyApplication
													.getNetObject()
													.isNetConnected()) {
												if (progressDialog != null && !progressDialog.isShowing()) {
													progressDialog
													.setMessage("正在发送短信...");
											progressDialog.show();
												}
												
												httpUtil = new XUtilsHelper(
														WebUrlConfig
																.reopen(menu
																		.getMenuItem(
																				index)
																		.getFriendId()),
														handler);
												httpUtil.sendGet(NINE);
											} else {
												CommonToast
														.showShortToastMessage(
																context,
																"网络无法连接！");
											}

								}
							});
					normalDia.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(
										DialogInterface dialog,
										int which) {
									dialog.dismiss();
								}
							});
					normalDia.create().show();

				}
			}
		});
	}

	@Override
	public void onClick(View v) {
		if (v == base_back_lay) {
			finish();
		}
		if (v == back) {
			finish();
		}
		if (v == friend_add) {
			Intent intent = new Intent(FriendListActivity.this,
					AddFriendPhoneActivity.class);
			startActivity(intent);
		}
	}

	private int dp2px(int dp) {
		return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,
				getResources().getDisplayMetrics());
	}

	/**
	 * 改变套餐确定点击事件 com.sitemap.na2ne.activities.changelistener
	 * 
	 * @author zhang create at 2016年1月7日 下午3:51:01
	 */
//	public class ChangeListener implements OnClickListener {
//		private int select;// 历史选中套餐
//		private Dialog dia;// 打开的Dialog
//		private RadioGroup rg;// 单选组
//		private RadioButton zhou;// 周选项
//		private RadioButton yue;// 月选项
//		private RadioButton nian;// 年选项
//		private int position;// 好友下标
//		private int again = 0;// 重新开通/订购
//		private int discount = 0;// 是否是优惠套餐
//
//		public ChangeListener(int select, Dialog dia, RadioGroup rg,
//				RadioButton zhou, RadioButton yue, RadioButton nian,
//				int position) {
//			this.rg = rg;
//			this.select = select;
//			this.dia = dia;
//			this.zhou = zhou;
//			this.yue = yue;
//			this.nian = nian;
//			this.position = position;
//		}
//
//		public ChangeListener(int select, Dialog dia, RadioGroup rg,
//				RadioButton zhou, RadioButton yue, RadioButton nian,
//				int position, int again) {
//			this.rg = rg;
//			this.select = select;
//			this.dia = dia;
//			this.zhou = zhou;
//			this.yue = yue;
//			this.nian = nian;
//			this.position = position;
//			this.again = again;
//		}
//
//		public ChangeListener(Dialog dia, RadioGroup rg, RadioButton zhou,
//				RadioButton yue, int position, int discount) {
//			this.rg = rg;
//			this.dia = dia;
//			this.zhou = zhou;
//			this.yue = yue;
//			this.nian = nian;
//			this.position = position;
//			this.discount = discount;
//		}
//
//		@Override
//		public void onClick(View v) {
//			int newselect = 0;
//			if (again == 0) {
//				if (select == rg.getCheckedRadioButtonId()) {
//					CommonToast.showShortToastMessage(context, "选中套餐与现套餐一致！");
//					return;
//				} else {
//					if (rg.getCheckedRadioButtonId() == zhou.getId()) {
//						newselect = 1;
//						taocan = "按周计费";
//					}
//					if (rg.getCheckedRadioButtonId() == yue.getId()) {
//						newselect = 2;
//						taocan = "按月计费";
//					}
//					if (rg.getCheckedRadioButtonId() == nian.getId()) {
//						newselect = 3;
//						taocan = "按年计费";
//					}
//					if (MyApplication.getNetObject().isNetConnected()) {
//						progressDialog.setMessage("正在更改联系人套餐...");
//						progressDialog.show();
//						httpUtil = new XUtilsHelper(
//								WebUrlConfig.updateFriendType(
//										MyApplication.userModel.getUserID(),
//										String.valueOf(newselect),
//										MyApplication.luserFriend.get(position)
//												.getFriendID()), handler);
//						httpUtil.sendGet(three);
//					} else {
//						CommonToast.showShortToastMessage(context, "网络无法连接！");
//					}
//					dia.dismiss();
//				}
//			} else {
//				if (rg.getCheckedRadioButtonId() == zhou.getId()) {
//					newselect = 1;
//					taocan = "按周计费";
//				}
//				if (rg.getCheckedRadioButtonId() == yue.getId()) {
//					newselect = 2;
//					taocan = "按月计费";
//				}
//				if (rg.getCheckedRadioButtonId() == nian.getId()) {
//					newselect = 3;
//					taocan = "按年计费";
//				}
//				if (MyApplication.getNetObject().isNetConnected()) {
//					progressDialog.setMessage("正在重新申请...");
//					progressDialog.show();
//					httpUtil = new XUtilsHelper(WebUrlConfig.orderAgainFriend(
//							MyApplication.userModel.getUserID(),
//							MyApplication.luserFriend.get(position)
//									.getFriendPhone(),
//							MyApplication.luserFriend.get(position)
//									.getFriendID(), String.valueOf(newselect),
//							MyApplication.luserFriend.get(position).getOpen()),
//							handler);
//					httpUtil.sendGet(five);
//				} else {
//					CommonToast.showShortToastMessage(context, "网络无法连接！");
//				}
//				dia.dismiss();
//			}
//
//			if (discount != zero) {
//
//			}
//
//		}
//
//	}
}
