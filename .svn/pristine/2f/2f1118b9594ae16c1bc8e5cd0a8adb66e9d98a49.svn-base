package com.sitemap.na2ne.activities;

import com.saitu.na2ne.R;
import com.sitemap.na2ne.application.MyApplication;
import com.sitemap.na2ne.utils.CommonToast;
import com.umeng.analytics.MobclickAgent;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.text.Editable;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

/**
 * com.sitemap.na2ne.activities.AddFriendPhoneActivity
 * @author zhang
 * create at 2016年3月24日 下午4:52:43
 */
public class AddFriendPhoneActivity extends Activity implements
OnClickListener{
	public static AddFriendPhoneActivity context;//本类
	private LinearLayout base_back_lay;//返回键
	private TextView back;//回退
	private EditText addfriend_num_ed;//联系人电话
	private TextView phone_next;//下一步
	private TextView phone_tishi1,phone_tishi3;//提示1和3
	private String numberType="1";//手机号类型
	private TextView tongxunlu;//通讯录
	private final int PICK_CONTACT=1001;//跳转code
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// 隐藏应用程序的标题栏，即当前activity的标题栏
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_addfriend_phone);
		context = this;
		initview();
	}
	/**
	 * 初始化控件
	 */
	private void initview() {
		back=(TextView)findViewById(R.id.back_tv);
		back.setOnClickListener(this);
		phone_next=(TextView)findViewById(R.id.phone_next);
		phone_tishi1=(TextView)findViewById(R.id.phone_tishi1);
		phone_tishi3=(TextView)findViewById(R.id.phone_tishi3);
		phone_next.setOnClickListener(this);
		addfriend_num_ed=(EditText)findViewById(R.id.addfriend_num_ed);
		base_back_lay=(LinearLayout)findViewById(R.id.base_back_lay);
		base_back_lay.setOnClickListener(this);
		tongxunlu=(TextView)findViewById(R.id.tongxunlu);
		tongxunlu.setOnClickListener(this);
		SpannableStringBuilder builder = new SpannableStringBuilder(phone_tishi1.getText().toString());  
		ForegroundColorSpan blueSpan = new ForegroundColorSpan(Color.parseColor("#1cace9"));  
		ForegroundColorSpan blueSpan1 = new ForegroundColorSpan(Color.parseColor("#1cace9"));
		builder.setSpan(blueSpan, 64, 71, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  
		phone_tishi1.setText(builder); 
		builder = new SpannableStringBuilder(phone_tishi3.getText().toString());
		builder.setSpan(blueSpan, 13, 19, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  
		builder.setSpan(blueSpan1, 20, 29, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  
		phone_tishi3.setText(builder); 
	}
	
	@Override
	public void onResume() {
		super.onResume();
		// 友盟统计
		MobclickAgent.onResume(this);
	}
	@Override
	public void onPause() {
		super.onPause();
		// 友盟统计
		MobclickAgent.onPause(this);
	}

	@Override
	public void onClick(View v) {
		if (v==base_back_lay) {
			finish();
		}
		if (v==back) {
			finish();
		}
		if (v==tongxunlu) {
			Intent intent = new Intent(Intent.ACTION_PICK,ContactsContract.Contacts.CONTENT_URI);
			startActivityForResult(intent, PICK_CONTACT);
		}
		if (v==phone_next) {
			if (addfriend_num_ed.getText().toString().trim()==null||addfriend_num_ed.getText().toString().trim().equals("")) {
				CommonToast.showShortToastMessage(context, "被定位号码不能为空！");
				return;
			}
			if (addfriend_num_ed.getText().toString().trim().length()!=11) {
				CommonToast.showShortToastMessage(context, "请输入11位手机号！");
				return;
			}
			if (MyApplication.isCTCCNO(addfriend_num_ed.getText().toString())) {
				numberType="1";
			}else 
			if (MyApplication.isCMCCNO(addfriend_num_ed.getText().toString())) {
				numberType="2";
			}else
			if (MyApplication.isCUCCNO(addfriend_num_ed.getText().toString())) {
				numberType="3";
			}else {
				CommonToast.showShortToastMessage(context,
						"请输入正确的手机号！");
				return;
			}
			Intent intent=new Intent(AddFriendPhoneActivity.this,AddFriendPackageActivity.class);
			intent.putExtra("numberType", numberType);
			intent.putExtra("phonenum", addfriend_num_ed.getText().toString());
			startActivity(intent);
		}
	}
	
	@Override
	public void onActivityResult(int reqCode, int resultCode, Intent data) {
	  super.onActivityResult(reqCode, resultCode, data);

	  switch (reqCode) {
	    case (PICK_CONTACT) :
	      if (resultCode == Activity.RESULT_OK) {
	    	  try {
				
			
	    	  Uri contactData = data.getData();  
	    	  
	          Cursor c = managedQuery(contactData, null, null, null, null);  
	    
	          c.moveToFirst();  
	    
	          String phoneNum=this.getContactPhone(c);  
	          if (phoneNum!=null) {
	        	  if (phoneNum.startsWith("+86")) {    
	        		  phoneNum = phoneNum.substring(3); //去掉+86   
                  }
	        	  if (!phoneNum.equals("")&&isNum(phoneNum.replace(" ", ""))) {
		        	  addfriend_num_ed.setText(phoneNum.replace(" ", ""));
				}else {
					 addfriend_num_ed.setText("");
					CommonToast.showShortToastMessage(context,
							"读取不到该号码，请手动输入！");
				}
			}else {
				addfriend_num_ed.setText("");
				CommonToast.showShortToastMessage(context,
						"读取不到该号码，请手动输入！");
			}
	          
	         
	          Log.i("TAG", ""+phoneNum);
	          Log.i("TAG", ""+isNum(phoneNum));
	    	  } catch (Exception e) {
	    		  addfriend_num_ed.setText("");
	    			CommonToast.showShortToastMessage(context,
							"读取不到该号码，请手动输入！");
				}
	      }
	      break;
	  }
	}
	
	private boolean isNum(String num){
		boolean isNum = num.matches("[0-9]+");
		return isNum;
	}
	
	
	/**
	 * 获取电话号码
	 * @param cursor
	 * @return
	 */
	private String getContactPhone(Cursor cursor)  
	{  
	  
	    int phoneColumn = cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER);    
	    int phoneNum = cursor.getInt(phoneColumn);   
	    String phoneResult="";  
	    //System.out.print(phoneNum);  
	    if (phoneNum > 0)  
	    {  
	    // 获得联系人的ID号  
	        int idColumn = cursor.getColumnIndex(ContactsContract.Contacts._ID);  
	        String contactId = cursor.getString(idColumn);  
	            // 获得联系人的电话号码的cursor;  
	            Cursor phones = getContentResolver().query(  
	            ContactsContract.CommonDataKinds.Phone.CONTENT_URI,  
	            null,  
	            ContactsContract.CommonDataKinds.Phone.CONTACT_ID+ " = " + contactId,   
	            null, null);  
	            //int phoneCount = phones.getCount();  
	            //allPhoneNum = new ArrayList<String>(phoneCount);  
	            if (phones.moveToFirst())  
	            {  
	                    // 遍历所有的电话号码  
	                    for (;!phones.isAfterLast();phones.moveToNext())  
	                    {                                              
	                        int index = phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);  
	                        int typeindex = phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE);  
	                        int phone_type = phones.getInt(typeindex);  
	                        String phoneNumber = phones.getString(index);  
	                        switch(phone_type)  
	                        {  
	                            case 2:  
	                                phoneResult=phoneNumber;  
	                            break;  
	                        }  
	                           //allPhoneNum.add(phoneNumber);  
	                    }  
	                    if (!phones.isClosed())  
	                    {  
	                           phones.close();  
	                    }  
	            }  
	    }  
	    return phoneResult;  
	}  

}
